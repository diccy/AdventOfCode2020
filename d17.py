
def Resolve(do_print = False):

    with open('d17.txt', 'r') as f:
        content = f.read().splitlines()

    NEIGHBOURS1 = ((-1,-1,-1), ( 0,-1,-1), ( 1,-1,-1),
                   (-1, 0,-1), ( 0, 0,-1), ( 1, 0,-1),
                   (-1, 1,-1), ( 0, 1,-1), ( 1, 1,-1),

                   (-1,-1, 0), ( 0,-1, 0), ( 1,-1, 0),
                   (-1, 0, 0),             ( 1, 0, 0),
                   (-1, 1, 0), ( 0, 1, 0), ( 1, 1, 0),

                   (-1,-1, 1), ( 0,-1, 1), ( 1,-1, 1),
                   (-1, 0, 1), ( 0, 0, 1), ( 1, 0, 1),
                   (-1, 1, 1), ( 0, 1, 1), ( 1, 1, 1))

    NEIGHBOURS2 = ((-1,-1,-1,-1), ( 0,-1,-1,-1), ( 1,-1,-1,-1),
                   (-1, 0,-1,-1), ( 0, 0,-1,-1), ( 1, 0,-1,-1),
                   (-1, 1,-1,-1), ( 0, 1,-1,-1), ( 1, 1,-1,-1),

                   (-1,-1, 0,-1), ( 0,-1, 0,-1), ( 1,-1, 0,-1),
                   (-1, 0, 0,-1), ( 0, 0, 0,-1), ( 1, 0, 0,-1),
                   (-1, 1, 0,-1), ( 0, 1, 0,-1), ( 1, 1, 0,-1),

                   (-1,-1, 1,-1), ( 0,-1, 1,-1), ( 1,-1, 1,-1),
                   (-1, 0, 1,-1), ( 0, 0, 1,-1), ( 1, 0, 1,-1),
                   (-1, 1, 1,-1), ( 0, 1, 1,-1), ( 1, 1, 1,-1),

                   (-1,-1,-1, 0), ( 0,-1,-1, 0), ( 1,-1,-1, 0),
                   (-1, 0,-1, 0), ( 0, 0,-1, 0), ( 1, 0,-1, 0),
                   (-1, 1,-1, 0), ( 0, 1,-1, 0), ( 1, 1,-1, 0),

                   (-1,-1, 0, 0), ( 0,-1, 0, 0), ( 1,-1, 0, 0),
                   (-1, 0, 0, 0),                ( 1, 0, 0, 0),
                   (-1, 1, 0, 0), ( 0, 1, 0, 0), ( 1, 1, 0, 0),

                   (-1,-1, 1, 0), ( 0,-1, 1, 0), ( 1,-1, 1, 0),
                   (-1, 0, 1, 0), ( 0, 0, 1, 0), ( 1, 0, 1, 0),
                   (-1, 1, 1, 0), ( 0, 1, 1, 0), ( 1, 1, 1, 0),

                   (-1,-1,-1, 1), ( 0,-1,-1, 1), ( 1,-1,-1, 1),
                   (-1, 0,-1, 1), ( 0, 0,-1, 1), ( 1, 0,-1, 1),
                   (-1, 1,-1, 1), ( 0, 1,-1, 1), ( 1, 1,-1, 1),

                   (-1,-1, 0, 1), ( 0,-1, 0, 1), ( 1,-1, 0, 1),
                   (-1, 0, 0, 1), ( 0, 0, 0, 1), ( 1, 0, 0, 1),
                   (-1, 1, 0, 1), ( 0, 1, 0, 1), ( 1, 1, 0, 1),

                   (-1,-1, 1, 1), ( 0,-1, 1, 1), ( 1,-1, 1, 1),
                   (-1, 0, 1, 1), ( 0, 0, 1, 1), ( 1, 0, 1, 1),
                   (-1, 1, 1, 1), ( 0, 1, 1, 1), ( 1, 1, 1, 1))

    def Part(part, neighbours, add):
        cubes = {}
        for y, line in enumerate(content):
            for x, c in enumerate(line):
                if c == '#':
                    cubes[(x, y, 0, 0)] = True

        for i in range(6):
            inactives = {}
            for k in cubes.keys():
                for dir in neighbours:
                    n = add(k, dir)
                    if not n in cubes:
                        inactives[n] = inactives.get(n, 0) + 1

            cubes_to_remove = []
            for k in cubes.keys():
                n_count = 0
                for dir in neighbours:
                    n = add(k, dir)
                    if n in cubes:
                        n_count += 1
                if not (n_count == 2 or n_count == 3):
                    cubes_to_remove.append(k)
            for k in cubes_to_remove:
                cubes.pop(k)

            for k, n_count in inactives.items():
                if n_count == 3:
                    cubes[k] = True

        if do_print:
            print(f"Cubes gaulois {part}:", len(cubes))

    Part(1, NEIGHBOURS1, lambda k, dir: (k[0] + dir[0], k[1] + dir[1], k[2] + dir[2], 0))
    Part(2, NEIGHBOURS2, lambda k, dir: (k[0] + dir[0], k[1] + dir[1], k[2] + dir[2], k[3] + dir[3]))


# #############################################################################
if __name__ == '__main__':
    Resolve(True)
    # Results with given input:
    #   1: 209
    #   2: 1492
